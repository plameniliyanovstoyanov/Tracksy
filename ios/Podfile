require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods', :deterministic_uuids => false

ENV['COCOAPODS_PARALLEL_CODE_SIGN'] = 'true'
prepare_react_native_project!

target 'Tracksy' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = ['npx','expo-modules-autolinking','react-native-config','--json','--platform','ios']
  end

  config = use_native_modules!(config_command)

  # Статични рамки = по-бързо линкване (и е ок за RN/Expo SDK 53)
  use_frameworks! :linkage => :static

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'].nil? || podfile_properties['expo.jsEngine'] == 'hermes',
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # Махни CC/CXX override за extension-а (ако си включвал ccache другаде)
    installer.aggregate_targets.each do |agg|
      project = agg.user_project
      project.targets.each do |t|
        if t.name == 'Live ActivityExtension'
          t.build_configurations.each do |cfg|
            cfg.build_settings.delete('CC')
            cfg.build_settings.delete('CXX')
          end
        end
      end
      project.save
    end

    # Оптимизации
    installer.pods_project.targets.each do |t|
      t.build_configurations.each do |c|
        c.build_settings['SWIFT_COMPILATION_MODE'] = 'wholemodule'
        c.build_settings['COMPILER_INDEX_STORE_ENABLE'] = 'NO'
        c.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Owholemodule'
        c.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf'
        c.build_settings['GCC_GENERATE_DEBUGGING_SYMBOLS'] = 'NO'
        c.build_settings['ENABLE_BITCODE'] = 'NO'
      end
    end

    # Не подписвай resource bundles (ускорява)
    installer.target_installation_results.pod_target_installation_results.each do |_, r|
      r.resource_bundle_targets.each do |bundle|
        bundle.build_configurations.each do |c|
          c.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
  end
end
